* dall-e-shell

#+HTML: <img src="https://raw.githubusercontent.com/xenodium/dall-e-shell/main/screenshot.png" style="max-width:80%;" />

An Emacs shell for OpenAI's DALL-E

For related packages, see:

- [[https://github.com/xenodium/chatgpt-shell][chatgpt-shell]]: An Emacs shell for OpenAI's ChatGPT.
- [[https://github.com/xenodium/ob-chatgpt-shell][ob-chatgpt-shell]]: Evaluate ChatGPT shell blocks in Emacs org babel blocks.
- [[https://github.com/xenodium/ob-dall-e-shell][ob-dall-e-shell]]: Evaluate DALL-E shell blocks in Emacs org babel blocks.
- [[https://github.com/xenodium/shell-maker][shell-maker]]: Create Emacs shells backed by either local or cloud services.

** Support this effort

If you're finding =dall-e-shell= useful, help make the project sustainable and consider âœ¨[[https://github.com/sponsors/xenodium][sponsoring]]âœ¨.

=dall-e-shell= is in development. Please report issues or send [[https://github.com/xenodium/dall-e-shell/pulls][pull requests]] for improvements.

** Like this package? Tell me about it ðŸ’™

Finding it useful? Like the package? I'd love to hear from you. Get in touch ([[https://indieweb.social/@xenodium][Mastodon]] / [[https://twitter.com/xenodium][Twitter]] / [[https://www.reddit.com/user/xenodium][Reddit]] / [[mailto:me__AT__xenodium.com][Email]]).

* Install

- Load =(require 'dall-e-shell)=

** MELPA

If using [[https://github.com/jwiegley/use-package][use-package]], you can install with =:ensure t=.
#+begin_src emacs-lisp :lexical no
  (use-package dall-e-shell
    :ensure t
    :custom
    ((dall-e-shell-openai-key
      (lambda ()
        (auth-source-pass-get 'secret "openai-key")))))
#+end_src
* Set OpenAI key

You'll first need to get a [[https://platform.openai.com/account/api-keys][key from OpenAI]].

** As function
#+begin_src emacs-lisp
  ;; if you are using the "pass" password manager
  (setq dall-e-shell-openai-key
        (lambda ()
          ;; (auth-source-pass-get 'secret "openai-key") ; alternative using pass support in auth-sources
          (nth 0 (process-lines "pass" "show" "openai-key"))))

  ;; or if using auth-sources, e.g., so the file ~/.authinfo has this line:
  ;;  machine api.openai.com password OPENAI_KEY
  (setq dall-e-shell-openai-key
        (auth-source-pick-first-password :host "api.openai.com"))

  ;; or same as previous but lazy loaded (prevents unexpected passphrase prompt)
  (setq dall-e-shell-openai-key
        (lambda ()
          (auth-source-pick-first-password :host "api.openai.com")))
#+end_src

** Manually
=M-x set-variable dall-e-shell-openai-key=

** As variable
#+begin_src emacs-lisp
  (setq dall-e-shell-openai-key "my key")
#+end_src

** As an ENV variable
#+begin_src emacs-lisp
(setq dall-e-shell-openai-key (getenv "OPENAI_API_KEY"))
#+end_src
* Launch

Launch with =M-x dall-e-shell=.

Note: =M-x =dall-e-shell= keeps a single shell around, refocusing if needed. To launch multiple shells, use =C-u M-x dall-e-shell=.

* Clear buffer

Type =clear= as a prompt.

#+begin_src sh
  DALL-E(v3)>  clear
#+end_src

Alternatively, use either =M-x dall-e-shell-clear-buffer= or =M-x comint-clear-buffer=.

* Customizations
#+BEGIN_SRC emacs-lisp :results table :colnames '("Custom variable" "Description") :exports results
  (let ((rows))
    (mapatoms
     (lambda (symbol)
       (when (and (string-match "^dall-e-shell"
                                (symbol-name symbol))
                  (custom-variable-p symbol))
         (push `(,symbol
                 ,(car
                   (split-string
                    (or (get (indirect-variable symbol)
                             'variable-documentation)
                        (get symbol 'variable-documentation)
                        "")
                    "\n")))
               rows))))
    rows)
#+END_SRC

#+RESULTS:
| Custom variable                      | Description                                                                 |
|--------------------------------------+-----------------------------------------------------------------------------|
| dall-e-shell-welcome-function        | Function returning welcome message or nil for no message.                   |
| dall-e-shell-openai-key              | OpenAI key as a string or a function that loads and returns it.             |
| dall-e-shell-image-size              | The default size of the requested image as a string.                        |
| dall-e-shell-read-string-function    | Function to read strings from user.                                         |
| dall-e-shell-request-timeout         | How long to wait for a request to time out.                                 |
| dall-e-shell-model-version           | The used DALL-E OpenAI model.  For Dall-E 3, use "dall-e-3".                |
| dall-e-shell-display-function        | Function to display the shell.  Set to `display-buffer' or custom function. |
| dall-e-shell-model-versions          | The list of Dall-E OpenAI models to swap from.                              |
| dall-e-shell-additional-curl-options | Additional options for `curl' command.                                      |
| dall-e-shell-image-output-directory  | Output directory for the generated image.                                   |
| dall-e-shell-image-quality           | Image quality: `standard' or `hd' (DALL-E 3 only feature).                  |

* Commands
#+BEGIN_SRC emacs-lisp :results table :colnames '("Command" "Description") :exports results
    (let ((rows))
      (mapatoms
       (lambda (symbol)
         (when (and (string-match "^dall-e-shell"
                                  (symbol-name symbol))
                    (commandp symbol))
           (push `(,(string-join
                     (seq-filter
                      (lambda (symbol)
                        (not (string-match "menu" symbol)))
                      (mapcar
                       (lambda (keys)
                         (key-description keys))
                       (or
                        (where-is-internal
                         (symbol-function symbol)
                         comint-mode-map
                         nil nil (command-remapping 'comint-next-input))
                        (where-is-internal
                         symbol dall-e-shell-mode-map nil nil (command-remapping symbol))
                        (where-is-internal
                         (symbol-function symbol)
                         dall-e-shell-mode-map nil nil (command-remapping symbol)))))  " or ")
                   ,(symbol-name symbol)
                   ,(car
                     (split-string
                      (or (documentation symbol t) "")
                      "\n")))
                 rows))))
      rows)
#+END_SRC

#+RESULTS:
| C-<up> or M-p   | dall-e-shell-previous-input                       | Cycle backwards through input history, saving input.              |
|                 | dall-e-shell                                      | Start a DALL-E shell.                                             |
|                 | dall-e-shell-insert-image-from-region-description | Generate and insert an image using current region as description. |
|                 | dall-e-shell-interrupt                            | Interrupt `dall-e-shell' from any buffer.                         |
| S-<return>      | dall-e-shell-newline                              | Insert a newline, and move to left margin of the new line.        |
| RET             | dall-e-shell-submit                               | Submit current input.                                             |
| C-x C-s         | dall-e-shell-save-session-transcript              | Save shell transcript to file.                                    |
| C-c C-v         | dall-e-shell-swap-model-version                   | Swap model version from `dall-e-shell-model-versions'.            |
|                 | dall-e-shell-mode                                 | Major mode for DALL-E shell.                                      |
| C-<down> or M-n | dall-e-shell-next-input                           | Cycle forwards through input history.                             |
| M-r             | dall-e-shell-search-history                       | Search previous input history.                                    |
|                 | dall-e-shell-rename-buffer                        | Rename current shell buffer.                                      |
* Support my work

ðŸ‘‰ Find my work useful? [[https://github.com/sponsors/xenodium][Support this work via GitHub Sponsors]] or [[https://apps.apple.com/us/developer/xenodium-ltd/id304568690][buy my iOS apps]].

* My other utilities, packages, apps, writing...

- [[https://xenodium.com/][Blog (xenodium.com)]]
- [[https://lmno.lol/alvaro][Blog (lmno.lol/alvaro)]]
- [[https://plainorg.com][Plain Org]] (iOS)
- [[https://flathabits.com][Flat Habits]] (iOS)
- [[https://apps.apple.com/us/app/scratch/id1671420139][Scratch]] (iOS)
- [[https://github.com/xenodium/macosrec][macosrec]] (macOS)
- [[https://apps.apple.com/us/app/fresh-eyes/id6480411697?mt=12][Fresh Eyes]] (macOS)
- [[https://github.com/xenodium/dwim-shell-command][dwim-shell-command]] (Emacs)
- [[https://github.com/xenodium/company-org-block][company-org-block]] (Emacs)
- [[https://github.com/xenodium/org-block-capf][org-block-capf]] (Emacs)
- [[https://github.com/xenodium/ob-swiftui][ob-swiftui]] (Emacs)
- [[https://github.com/xenodium/chatgpt-shell][chatgpt-shell]] (Emacs)
- [[https://github.com/xenodium/ready-player][ready-player]] (Emacs)
- [[https://github.com/xenodium/sqlite-mode-extras][sqlite-mode-extras]]
- [[https://github.com/xenodium/ob-chatgpt-shell][ob-chatgpt-shell]] (Emacs)
- [[https://github.com/xenodium/dall-e-shell][dall-e-shell]] (Emacs)
- [[https://github.com/xenodium/ob-dall-e-shell][ob-dall-e-shell]] (Emacs)
- [[https://github.com/xenodium/shell-maker][shell-maker]] (Emacs)
